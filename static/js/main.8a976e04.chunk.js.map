{"version":3,"sources":["Constants.js","OptionMenu.jsx","actions/index.js","ControlsArea.jsx","TextArea.jsx","object/BooleanType.tsx","object/NumberType.tsx","object/StringType.tsx","Expander.jsx","object/ObjectType.tsx","VisualizedData.jsx","Closer.jsx","Page.jsx","App.jsx","reducers/index.js","index.jsx"],"names":["ValidationClass","Actions","OptionMenu","className","data-mdl-for","onClick","this","props","pasteSample","setAutoFormat","autoFormat","React","Component","connect","state","dispatch","enabled","type","ControlsArea","Clipboard","text","blob","Blob","saveAs","isEmpty","textLength","id","data-clipboard-target","disabled","title","downloadJson","length","TextArea","onChange","bind","onDrop","resetTimeout","timeoutId","refs","jsonText","addEventListener","event","animationName","resetValid","clearTimeout","setTimeout","value","setText","updateText","target","stopPropagation","preventDefault","dataTransfer","files","file","reader","FileReader","onload","result","readAsText","valid","placeholder","ref","newText","BooleanType","data","checked","readOnly","NumberType","StringType","validator","isURL","match","href","rel","src","alt","Expander","expanded","defaultValue","newValue","setState","onChangeExpansion","classes","join","ObjectType","level","useState","setExpanded","nextLevel","rows","Object","keys","map","name","key","typeLabel","Array","isArray","headerLabel","toString","data-level","flag","VisualizedData","Closer","isTextareaClose","Page","visualized","push","App","previousEvent","body","document","getElementsByTagName","e","classList","remove","add","initialState","reducer","action","_setText","JSON","parse","stringify","assign","SampleJson","enhancer","compose","persistState","store","createStore","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.8a976e04.chunk.js","sourcesContent":["export const ValidationClass = {\n  Valid:   'valid',\n  Invalid: 'invalid',\n  None:    ''\n}\n\nexport const Actions = {\n  UpdateText: 'UPDATE_TEXT',\n  SetText: 'SET_TEXT',\n  ClearText: 'CLEAR_TEXT',\n  CopyText: 'COPY_TEXT',\n  PasteSample: 'PASTE_SAMPLE',\n  SetAutoFormat: 'SET_AUTO_FORMAT',\n  ResetValid: 'RESET_VALID',\n  OpenTextarea: 'OPEN_TEXTAREA',\n  CloseTextarea: 'CLOSE_TEXTAREA',\n  ToggleTextarea: 'TOGGLE_TEXTAREA'\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setAutoFormat, pasteSample } from './actions';\n\nclass OptionMenu extends React.Component {\n\n  render() {\n    return (\n      <ul className=\"mdl-menu mdl-menu--top-left mdl-js-menu mdl-js-ripple-effect\" data-mdl-for=\"more-button\">\n        <li className=\"mdl-menu__item\" onClick={this.props.pasteSample}>\n          Paste Sample JSON\n        </li>\n        <li className=\"mdl-menu__item\" onClick={() => this.props.setAutoFormat(!this.props.autoFormat)} >\n          {(this.props.autoFormat) ? 'Disable Auto Format' : 'Enable Auto Format'}\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default connect(\n  (state) => {\n    return {\n      autoFormat: state.autoFormat\n    }\n  },\n  (dispatch) => {\n    return {\n      setAutoFormat: (enabled) => {\n        dispatch(setAutoFormat(enabled))\n      },\n      pasteSample: () => {\n        dispatch(pasteSample())\n      }\n    }\n  }\n)(OptionMenu)\n","import {Actions} from '../Constants.js'\n\nexport const updateText = (newText) => {\n  return {\n    type: Actions.UpdateText,\n    newText\n  }\n}\n\nexport const setText = (newText) => {\n  return {\n    type: Actions.SetText,\n    newText\n  }\n}\n\nexport const clearText = () => {\n  return {\n    type: Actions.ClearText\n  }\n}\n\nexport const copyText = () => {\n  return {\n    type: Actions.CopyText\n  }\n}\n\nexport const pasteSample = () => {\n  return {\n    type: Actions.PasteSample\n  }\n}\n\nexport const setAutoFormat = (enabled) => {\n  return {\n    type: Actions.SetAutoFormat,\n    enabled\n  }\n}\n\nexport const resetValid = () => {\n  return {\n    type: Actions.ResetValid\n  }\n}\n\nexport const openTextarea = () => {\n  return {\n    type: Actions.OpenTextarea\n  }\n}\n\nexport const closeTextarea = () => {\n  return {\n    type: Actions.CloseTextarea\n  }\n}\n\nexport const toggleTextarea = () => {\n  return {\n    type: Actions.ToggleTextarea\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Clipboard from 'clipboard';\nimport { saveAs } from 'file-saver';\n\nimport OptionMenu from './OptionMenu';\nimport { clearText } from './actions'\n\nclass ControlsArea extends React.Component {\n\n  componentDidMount() {\n    // init clipboard\n    new Clipboard('#copy-to-clipboard');\n  }\n\n  downloadJson(text) {\n    var blob = new Blob([text], {type: 'application/json;charset=utf-8'});\n    saveAs(blob, 'data.json');\n  }\n\n  render() {\n    const { dispatch, isEmpty, textLength } = this.props\n    return (\n      <div className=\"controls-area\">\n        <div className=\"float-left\">\n          <button\n            id=\"copy-to-clipboard\"\n            data-clipboard-target=\"#json-text\"\n            disabled={isEmpty}\n            className=\"mdl-button mdl-js-button mdl-button--icon\"\n            title=\"Copy\"\n          >\n            <i className=\"material-icons\">content_copy</i>\n          </button>\n        </div>\n        <div className=\"float-left\">\n          <button\n            id=\"donwload\"\n            disabled={isEmpty}\n            className=\"mdl-button mdl-js-button mdl-button--icon\"\n            onClick={() => this.downloadJson(this.props.text)}\n            title=\"Download\"\n          >\n            <i className=\"material-icons\">file_download</i>\n          </button>\n        </div>\n        <div className=\"float-left\">\n          <button\n            className=\"mdl-button mdl-js-button mdl-button--icon\"\n            disabled={isEmpty}\n            onClick={() => dispatch(clearText())}\n            title=\"Clear\"\n          >\n            <i className=\"material-icons\">delete</i>\n          </button>\n        </div>\n        <div className=\"float-left\">\n          <button\n            className=\"mdl-button mdl-js-button mdl-button--icon\"\n            title=\"More\"\n            id=\"more-button\"\n          >\n            <i className=\"material-icons\">more_vert</i>\n          </button>\n          <OptionMenu />\n        </div>\n        <div className=\"float-right control-count\">\n          <span className=\"text-count\">{textLength}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => {\n    return {\n      textLength: state.text.length,\n      isEmpty: state.text.length === 0,\n      text: state.text\n    }\n  }\n)(ControlsArea)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateText, setText, resetValid } from './actions';\nimport ControlsArea from './ControlsArea';\n\nclass TextArea extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // bind React.Component for this\n    this.onChange = this.onChange.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.resetTimeout = this.resetTimeout.bind(this);\n    // for timer\n    this.timeoutId = 0;\n  }\n\n  componentDidMount() {\n    // remove class when the animation end\n    this.refs.jsonText.addEventListener('animationend', (event) => {\n      if (event.animationName === 'invalidFrames' ||\n          event.animationName === 'validFrames') {\n        this.props.resetValid()\n      }\n    }, false)\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeoutId);\n    this.timeoutId = setTimeout(() => {\n      let text = this.refs.jsonText.value\n      this.props.setText(text)\n    }, 1000);\n  }\n\n  onChange(event) {\n    this.resetTimeout();\n    this.props.updateText(event.target.value)\n  }\n\n  onDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    if (event.dataTransfer.files.length > 0) {\n      var file = event.dataTransfer.files[0];\n      var reader = new FileReader();\n      reader.onload = (() => {\n        this.props.setText(reader.result)\n      });\n      reader.readAsText(file);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"textarea-column\">\n        <textarea id=\"json-text\"\n          className={this.props.valid}\n          placeholder=\"Write JSON code or drop a JSON file here.\"\n          value={this.props.text}\n          onChange={this.onChange}\n          onDrop={this.onDrop}\n          ref=\"jsonText\"></textarea>\n        <ControlsArea />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => {\n    return {\n      text: state.text,\n      autoFormat: state.autoFormat,\n      valid: state.valid\n    }\n  },\n  (dispatch) => {\n    return {\n      updateText: (text) => {\n        dispatch(updateText(text))\n      },\n      setText: (text) => {\n        dispatch(setText(text))\n      },\n      resetValid: () => {\n        dispatch(resetValid())\n      }\n    }\n  }\n)(TextArea)\n","import React from 'react';\n\ninterface Props {\n  data: boolean;\n}\n\nconst BooleanType: React.FC<Props> = ({ data }) => {\n  return (\n    <label className=\"mdl-checkbox mdl-js-checkbox boolean-type\">\n      <input\n        type=\"checkbox\"\n        checked={data}\n        readOnly\n        className=\"mdl-checkbox__input\"\n      />\n      <span className=\"mdl-checkbox__label\">{data ? 'true' : 'false'}</span>\n    </label>\n  );\n};\n\nexport default BooleanType;\n","import React from 'react';\n\ninterface Props {\n  data: number;\n}\n\nconst NumberType: React.FC<Props> = ({ data }) => {\n  return <span className=\"number-type\">{data}</span>;\n};\n\nexport default NumberType;\n","import React, { ReactElement } from 'react';\nimport validator from 'validator';\n\ninterface Props {\n  data: string;\n}\n\nconst StringType: React.FC<Props> = ({ data }) => {\n  let result: ReactElement | string = '';\n  if (validator.isURL(data)) {\n    if (data.match(/\\.(jpg|jpeg|png|gif)$/)) {\n      result = (\n        <a href={data} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={data} alt={data} />\n          <br />\n          <span>{data}</span>\n        </a>\n      );\n    } else {\n      result = (\n        <a href={data} target=\"_blank\" rel=\"noopener noreferrer\">\n          <span>{data}</span>\n        </a>\n      );\n    }\n  } else {\n    result = `\"${data}\"`;\n  }\n  return <span className=\"string-type\">{result}</span>;\n};\n\nexport default StringType;\n","import React from 'react';\n\nexport default class Expander extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // state\n    this.state = {\n      expanded: props.defaultValue,\n    };\n  }\n\n  onClick() {\n    const newValue = !this.state.expanded;\n    this.setState({ expanded: newValue });\n    if ('onChangeExpansion' in this.props) {\n      this.props.onChangeExpansion(newValue);\n    }\n  }\n\n  render() {\n    const classes = [\n      'component-expander',\n      this.state.expanded ? 'expanded' : '',\n      'mdl-button',\n      'mdl-js-button',\n    ].join(' ');\n    return (\n      <button className={classes} onClick={(event) => this.onClick(event)}>\n        <i className=\"material-icons\">expand_more</i>\n      </button>\n    );\n  }\n}\n","import React, { useState } from 'react';\n\nimport BooleanType from './BooleanType';\nimport NumberType from './NumberType';\nimport StringType from './StringType';\nimport Expander from '../Expander';\n\ninterface Props {\n  data: any;\n  level: number;\n}\n\nconst maxLevel = 5;\n\nconst ObjectType: React.FC<Props> = ({ data, level = 0 }) => {\n  const [expanded, setExpanded] = useState(true);\n  const nextLevel = level === maxLevel ? 0 : level + 1;\n\n  const onChangeExpansion = (isExpanded: boolean) => {\n    setExpanded(isExpanded);\n  };\n\n  let result = null;\n  if (data === null) {\n    // null\n    result = <span className=\"null\">null</span>;\n  } else if (data !== null && typeof data === typeof {}) {\n    // Object or Array\n    let rows = Object.keys(data).map((name) => {\n      return (\n        <tr key={name}>\n          <th>{name}</th>\n          <td>\n            <ObjectType data={data[name]} level={nextLevel} />\n          </td>\n        </tr>\n      );\n    });\n    const typeLabel = Array.isArray(data) ? 'Array' : 'Object';\n    const headerLabel = '[' + rows.length.toString() + ']';\n    result = (\n      <table>\n        <thead data-level={level}>\n          <tr>\n            <th className=\"expand\">\n              <Expander\n                defaultValue={expanded}\n                onChangeExpansion={(flag: boolean) => onChangeExpansion(flag)}\n              />\n            </th>\n            <th className=\"objectType\">{`${typeLabel} ${headerLabel}`}</th>\n          </tr>\n        </thead>\n        <tbody className={expanded ? 'expanded' : ''}>{rows}</tbody>\n      </table>\n    );\n  } else if (typeof data === typeof 1) {\n    // Number\n    result = <NumberType data={data} />;\n  } else if (typeof data === typeof 'a') {\n    // String\n    result = <StringType data={data} />;\n  } else if (typeof data === typeof true) {\n    // Boolean\n    result = <BooleanType data={data} />;\n  } else {\n    // something else\n    result = <span className=\"undefined\">{data}</span>;\n  }\n  return result;\n};\n\nexport default ObjectType;\n","import React      from 'react';\nimport ObjectType from './object/ObjectType';\nimport { connect } from 'react-redux';\n\nclass VisualizedData extends React.Component {\n  render() {\n    return (\n      <ObjectType data={this.props.data} />\n    );\n  }\n}\n\nexport default connect(\n  (state) => {\n    return {\n      data: state.data\n    }\n  }\n)(VisualizedData)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { toggleTextarea } from './actions'\n\nclass Closer extends React.Component {\n\n  render() {\n    const { dispatch } = this.props\n    return (\n      <div className=\"closer\">\n        <button\n          className=\"mdl-button mdl-js-button mdl-button--icon\"\n          title=\"Open/Close text area\"\n          onClick={() => dispatch(toggleTextarea())}\n          id=\"expand-button\"\n        >\n          <i className=\"material-icons\">expand_more</i>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => {\n    return {\n      isTextareaClose: state.isTextareaClose\n    }\n  }\n)(Closer)\n","import React    from 'react';\nimport { connect } from 'react-redux';\n\nimport TextArea       from './TextArea';\nimport VisualizedData from './VisualizedData';\nimport Closer         from './Closer';\n\nclass Page extends React.Component {\n  render() {\n    let classes = {\n      jsonText:   ['json-text',       'mdl-cell', 'mdl-cell--8-col-tablet'],\n      visualized: ['visualized-data', 'mdl-cell', 'mdl-cell--8-col-tablet']\n    }\n    if (this.props.isTextareaClose) {\n      classes.jsonText.push(  'closed', 'mdl-cell--1-col')\n      classes.visualized.push('closed', 'mdl-cell--11-col')\n    }\n    else {\n      classes.jsonText.push(  'mdl-cell--4-col')\n      classes.visualized.push('mdl-cell--8-col')\n    }\n    return (\n      <div className=\"mdl-layout mdl-js-layout mdl-layout--fixed-header\">\n        <header className=\"mdl-layout__header\">\n          <div className=\"mdl-layout__header-row\">\n            <h1 className=\"mdl-layout-title\">JSON Visual Editor</h1>\n            <div className=\"mdl-layout-spacer\"></div>\n            <nav className=\"mdl-navigation\">\n              <a className=\"mdl-navigation__link\" href=\"https://github.com/ogaoga/json-visual-editor/issues/new\"><i className=\"material-icons\">feedback</i> Feedback</a>\n            </nav>\n          </div>\n        </header>\n        <main className=\"mdl-layout__content\">\n          <div className=\"mdl-grid\">\n            <section className={classes.jsonText.join(' ')}>\n              <TextArea />\n              <Closer />\n            </section>\n            <section className={classes.visualized.join(' ')}>\n              <VisualizedData />\n            </section>\n          </div>\n        </main>\n        <footer>\n          <div>\n            <span><a href=\"https://github.com/ogaoga/json-visual-editor\">Source code on GitHub</a></span>\n            <span> | </span>\n            <span><a href=\"http://qiita.com/ogaoga/items/1dae5586601e6900c3f1\">Development guide on Qiita</a></span>\n          </div>\n          <div>\n            <span>Copyright &copy; 2016 - 2017 ogaoga.org</span>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => {\n    return {\n      isTextareaClose: state.isTextareaClose\n    }\n  }\n)(Page)\n","import React from 'react';\nimport '../node_modules/material-design-lite/material.min.js';\nimport Page from './Page';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // for drag event handling\n    this.previousEvent = null;\n  }\n\n  componentDidMount() {\n    let body = document.getElementsByTagName('body')[0];\n    body.addEventListener('drop', (e) => {\n      if (e.target.id !== 'json-text') {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      this.previousEvent = 'drop';\n      body.classList.remove('dragging');\n    });\n    body.addEventListener('dragover', (e) => {\n      if (this.previousEvent === 'dragenter') {\n        body.classList.add('dragging');\n      }\n      this.previousEvent = 'dragover';\n      e.preventDefault();\n      return false;\n    });\n    body.addEventListener('dragenter', () => {\n      this.previousEvent = 'dragenter';\n    });\n    body.addEventListener('dragleave', () => {\n      if (this.previousEvent === 'dragover') {\n        body.classList.remove('dragging');\n      }\n      this.previousEvent = 'dragleave';\n    });\n  }\n\n  render() {\n    return (\n      <Page />\n    );\n  }\n}\n\nexport default App\n","import SampleJson from '../samples/simple.json';\nimport { ValidationClass, Actions } from '../Constants.js';\n\nconst initialState = {\n  data: null,\n  text: '',\n  autoFormat: false,\n  valid: ValidationClass.None,\n  isTextareaClose: false,\n};\n\nconst reducer = (state = initialState, action) => {\n  const _setText = (state, action) => {\n    let text = action.newText || '';\n    let data = state.data;\n    let valid = state.valid;\n    if (text.length > 0) {\n      try {\n        // set data\n        data = JSON.parse(text);\n        // format\n        if (state.autoFormat) {\n          text = JSON.stringify(data, null, 2);\n        }\n        valid = ValidationClass.Valid;\n      } catch (e) {\n        data = null;\n        valid = ValidationClass.Invalid;\n      }\n    } else {\n      data = null;\n      valid = ValidationClass.Invalid;\n    }\n    return [text, data, valid];\n  };\n\n  switch (action.type) {\n    /*\n     * Set and parse text, and update data\n     */\n    case Actions.SetText: {\n      const [text, data, valid] = _setText(state, action);\n      // return new state\n      return Object.assign({}, state, {\n        text: text,\n        data: data,\n        valid: valid,\n      });\n    }\n\n    /*\n     * Just update the textarea.\n     */\n    case Actions.UpdateText: {\n      return Object.assign({}, state, {\n        text: action.newText,\n      });\n    }\n\n    case Actions.ClearText: {\n      return Object.assign({}, state, {\n        text: '',\n        data: null,\n      });\n    }\n\n    case Actions.CopyText: {\n      return state;\n    }\n\n    case Actions.PasteSample: {\n      action.newText = JSON.stringify(SampleJson);\n      const [text, data, valid] = _setText(state, action);\n      return Object.assign({}, state, {\n        text: text,\n        data: data,\n        valid: valid,\n      });\n    }\n\n    case Actions.SetAutoFormat: {\n      return Object.assign({}, state, {\n        autoFormat: action.enabled,\n      });\n    }\n\n    case Actions.ResetValid: {\n      return Object.assign({}, state, {\n        valid: ValidationClass.None,\n      });\n    }\n\n    case Actions.OpenTextarea: {\n      return Object.assign({}, state, {\n        isTextareaClose: false,\n      });\n    }\n\n    case Actions.CloseTextarea: {\n      return Object.assign({}, state, {\n        isTextareaClose: true,\n      });\n    }\n\n    case Actions.ToggleTextarea: {\n      return Object.assign({}, state, {\n        isTextareaClose: !state.isTextareaClose,\n      });\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default reducer;\n","import React           from 'react';\nimport ReactDOM        from 'react-dom'\nimport { compose, createStore } from 'redux'\nimport { Provider }    from 'react-redux'\nimport persistState    from 'redux-localstorage'\n\nimport App     from './App'\nimport reducer from './reducers'\nimport './index.scss';\n\n// For local storage cache\nconst enhancer = compose(\n  persistState()\n)\n\nconst store = createStore(reducer, enhancer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#myApp')\n)\n"],"sourceRoot":""}